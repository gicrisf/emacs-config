;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/gicrisf/emacs-config
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "gicrisf"
      user-mail-address "giovanni.crisalfi@protonmail.com")

;; Thanks to
;; https://stackoverflow.com/a/30568768
(defun eval-file (file)
  "Execute FILE and return the result of the last expression."
  (load-file file)
  (with-temp-buffer
    (insert-file-contents file)
    (emacs-lisp-mode)
    (goto-char (point-max))
    (backward-sexp)
    (eval (sexp-at-point))))

;; This file could be placed anywhere
(setq env-vars-file-path "~/.envvars")

(defun load-env-vars ()
  (let ((env-var-list (eval-file env-vars-file-path)))
    (mapc (lambda (cons-cell)
            (setenv (car cons-cell) (car (cdr cons-cell)))) env-var-list)))

(load-env-vars)

(defun bash-load-env-vars ()
  (let* ((env-var-list (eval-file env-vars-file-path))
         (bash-strings (mapcar (lambda (cons-cell)
                                 (concat "export "
                                         (car cons-cell) "="
                                         (concat "'" (car (cdr cons-cell)) "'")))
                               env-var-list)))
    (with-temp-file "~/.bashvars"
      (mapc (lambda (exp_string)
              (insert (concat exp_string "\n"))) bash-strings))))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Noto Sans Mono" :size (string-to-number (getenv "DOOM_FONT")) :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size (string-to-number (getenv "DOOM_VARIABLE_PITCH_FONT"))))

(map!
 :n "C-=" #'doom/reset-font-size
 :n "C-+" #'text-scale-increase
 :n "C--" #'text-scale-decrease)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-city-lights)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")

(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)

(setq org-cite-global-bibliography '("~/Dropbox/references.bib"))

;; (setq! bibtex-completion-bibliography '("/path/to/references.bib"))
(setq! citar-bibliography '("~/Dropbox/references.bib"))

;; (setq! citar-library-paths '("/path/to/library/files/")
;;       citar-notes-paths '("/path/to/your/notes/"))

(setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf")))

(setq org-roam-directory "~/Dropbox/roam")

(require 'elfeed-goodies)
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)

(defvar mk/hyperspec-dir-locations
  '("~/Downloads/HyperSpec-7-0/HyperSpec/")
  "List of possible locations where the local HyperSpec could reside.")

(defun mk/find-dir (x)
  "Recursively search for a valid directory from a list X of directories.
Returns the first valid directory, or nil if none found."
  (cond ((null x) nil)
        ((file-directory-p (car x)) (car x))
        (t (mk/find-dir (cdr x)))))

(defun mk/hyperspec-dir ()
  "Finds and returns the URI of the local HyperSpec directory.
Uses `mk/hyperspec-dir-locations' to find the directory."
  (let ((dir-prefix
         (if (eq system-type 'windows-nt)
             "file:///"
           "file://"))
        (dir (mk/find-dir mk/hyperspec-dir-locations)))
    (if dir
        (concat dir-prefix
                (expand-file-name dir))
      nil)))

(setq common-lisp-hyperspec-root (let ((dir-found? (mk/hyperspec-dir)))
                                   (if dir-found?
                                       dir-found?
                                     "http://www.lispworks.com/reference/HyperSpec/")))

(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n") (setq end (1+ end)))
    (indent-region begin end)
    (normal-mode))
  (message "Ah, much better!"))

(setq which-key-idle-delay 0.5) ;; I need the help, I really do

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(setq config-org-file-name "config.org"
      config-org-directory "~/.doom.d")

(defun open-config-org ()
  "Open your private config.org file."
  (interactive)
  (find-file (expand-file-name config-org-file-name config-org-directory)))

(map! :leader
      (:prefix-map ("o" . "open")
       :desc "Open your private config.org file." "c" #'open-config-org))

(setf (nth 5 +doom-dashboard-menu-sections) '("Open org configuration" :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title) :action open-config-org))

(map! :leader
      (:prefix-map ("e" . "elfeed")
       :desc "Enter elfeed." "e" #'elfeed))

(setf (nth 2 +doom-dashboard-menu-sections) '("Open elfeed" :icon (all-the-icons-octicon "rss" :face 'doom-dashboard-menu-title) :action elfeed))

(map! :leader
      (:prefix-map ("e" . "elfeed")
       :desc "Update all the feeds in elfeed." "u" #'elfeed-update))

(map! :leader
      (:prefix-map ("q" . "quit/session")
       :desc "Switch to the dashboard in the current window, of the current FRAME." "h" #'+doom-dashboard/open))

(setf (nth 3 +doom-dashboard-menu-sections) '("Open info" :icon (all-the-icons-octicon "info" :face 'doom-dashboard-menu-title) :action info))

(setf (nth 0 +doom-dashboard-menu-sections) '("Open project" :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title) :action projectile-switch-project))

(map! :leader
      (:prefix-map ("o" . "open")
       :desc "Open org manual." "i" #'org-info))

(setf (nth 6 +doom-dashboard-menu-sections) '("Doom documentation" :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title) :action doom/help))

(setq wttrin-default-cities '("Caltagirone" "Bologna" "Ferrara" "Catania"))
(setq wttrin-default-accept-language '("Accept-Language" . "it-IT"))

(setq openai-key (getenv "OPENAI_KEY"))

(setq chatgpt-repo-path "~/Projects/ChatGPT.el/")

(setq gptel-api-key (getenv "OPENAI_KEY"))

(defun +snippet--completing-read-uuid (prompt all-snippets &rest args)
  (let* ((snippet-data (cl-loop for (_ . tpl) in (mapcan #'yas--table-templates (if all-snippets
                                                                                    (hash-table-values yas--tables)
                                                                                  (yas--get-snippet-tables)))

                                for txt = (format "%-25s%-30s%s"
                                                  (yas--template-key tpl)
                                                  (yas--template-name tpl)
                                                  (abbreviate-file-name (yas--template-load-file tpl)))
                                collect
                                `(,txt . ,(yas--template-uuid tpl))))
         (selected-value (apply #'completing-read prompt snippet-data args)))
    (alist-get selected-value snippet-data nil nil 'equal)))

(defun gicrisf/emacs-lisp-byte-compile-and-load-from-path (path)
  "Byte-compile the file in PATH (if it has changed), then load compiled code."
  (interactive nil emacs-lisp-mode)
  (emacs-lisp--before-compile-buffer)
  (require 'bytecomp)
  (let ((abspath (expand-file-name path)))
    (byte-recompile-file abspath nil 0)
    (load (byte-compile-dest-file abspath))))
