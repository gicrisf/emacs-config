;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/gicrisf/emacs-config
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! spacemacs-theme)

(package! lambda-themes :recipe (:host github :repo "lambda-emacs/lambda-themes"))

(package! catppuccin :recipe (:host github :repo "catppuccin/emacs"))

(package! org-download)

(package! org-drill)

(package! anki-editor)

(package! org-journal)

(package! org-web-tools)

(package! citeproc)

(package! wikinforg)

(package! jinx)

(package! prescient)

(package! vertico-prescient)

(package! ob-d2 :recipe (:host github :repo "dmacvicar/ob-d2"))

(package! ox-json)

(package! org-roam-ui)

(package! citar-org-roam)

(package! org-transclusion)

(package! elfeed-goodies)

(package! elfeed-score)

(package! vala-mode)

(package! pyvenv)

(package! racer :disable t)

(package! cobol-mode)

(defvar mk/hyperspec-dir-locations
  '("~/Downloads/HyperSpec-7-0/HyperSpec/")
  "List of possible locations where the local HyperSpec could reside.")

(defun mk/find-dir (x)
  "Recursively search for a valid directory from a list X of directories.
Returns the first valid directory, or nil if none found."
  (cond ((null x) nil)
        ((file-directory-p (car x)) (car x))
        (t (mk/find-dir (cdr x)))))

(defun mk/hyperspec-dir ()
  "Finds and returns the URI of the local HyperSpec directory.
Uses `mk/hyperspec-dir-locations' to find the directory."
  (let ((dir-prefix
         (if (eq system-type 'windows-nt)
             "file:///"
           "file://"))
        (dir (mk/find-dir mk/hyperspec-dir-locations)))
    (if dir
        (concat dir-prefix
                (expand-file-name dir))
      nil)))

(setq common-lisp-hyperspec-root (let ((dir-found? (mk/hyperspec-dir)))
                                   (if dir-found?
                                       dir-found?
                                     "http://www.lispworks.com/reference/HyperSpec/")))

(package! clip2org :recipe (:host github :repo "Kungsgeten/clip2org"))

;; (package! ox-hugo :recipe (:host github :repo "gicrisf/ox-zola"))
(package! ox-hugo)

(package! eltweet :recipe (:host github :repo "gicrisf/eltweet"))

;; (package! mastodon :recipe (:host codeberg :repo "rougier/mastodon.el"))

(package! info-colors)

(package! malyon)

(package! wttrin :recipe (:host github :repo "gicrisf/emacs-wttrin"))

;; (package! tochemfig :recipe (:host github :repo "gicrisf/tochemfig"))

(package! openai :recipe (:host github :repo "emacs-openai/openai"))
(package! chatgpt :recipe (:host github :repo "emacs-openai/chatgpt"))

;; (setq chatgpt-spinner-type 'rotating-line)
(setq chatgpt-spinner-type 'minibox)

;; (package! chatgptel :recipe (:host github :repo "joshcho/ChatGPT.el"))

(package! gptel :recipe (:host github :repo "karthink/gptel"))

(package! dall-e :recipe (:host github :repo "emacs-openai/dall-e"))

(package! deferred)

(package! epc :recipe (:host github :repo "kiwanami/emacs-epc"))

(package! kaomel :recipe (:host github :repo "gicrisf/kaomel"))

(package! pcre2el :recipe (:host github :repo "joddie/pcre2el"))
